module vga (input [0:0] CLOCK_27, input KEY0, output reg [3:0] VGA_R, VGA_G, VGA_B, output reg VGA_HS, VGA_VS, output [7:0] LEDR, output [7:0] LEDG);

parameter FRONT_PORCH_A = 16;
parameter SYNC_PULSE_B  = 96;
parameter BACK_PORCH_C  = 48;
parameter ACTIVE_VIDEO_D= 640;
parameter CYCLES_LINE = FRONT_PORCH_A + SYNC_PULSE_B + BACK_PORCH_C + ACTIVE_VIDEO_D;

parameter V_FRONT_PORCH_A  = 10;
parameter V_SYNC_PULSE_B   = 2;
parameter V_BACK_PORCH_C   = 33;
parameter V_ACTIVE_VIDEO_D = 480;
parameter CYCLES_ROW = V_FRONT_PORCH_A + V_SYNC_PULSE_B + V_BACK_PORCH_C + V_ACTIVE_VIDEO_D;

parameter COLS=64;
parameter ROWS=48;

wire VGA_CLK;
reg [9:0] HS_count;
reg [9:0] VS_count;
reg [9:0] frameCounter;
reg [ROWS-1:0] fb [COLS-1:0];

reg tick;
wire [15:0] rndBig;
LFSR16(tick, rndBig);
wire [7:0] rndHi;
wire [7:0] rndLo;
assign rndHi = rndBig[15:8];
assign rndLo = rndBig[7:0];
assign LEDR = rndHi;
assign LEDG = rndLo;

clock27 u0 (
	  .clk_out_clk   (VGA_CLK),
	  .clk_res_reset (0),
	  .clk_in_clk    (CLOCK_27[0])
);

always @(posedge VGA_CLK) // HSYNC
begin
	if(HS_count < CYCLES_LINE)
		HS_count <= HS_count + 1;
	else
		HS_count <= 0;
	
	if(HS_count > ACTIVE_VIDEO_D + FRONT_PORCH_A && HS_count < CYCLES_LINE - BACK_PORCH_C)
		VGA_HS <= 0;
	else
		VGA_HS <= 1;
end 
 
always @(posedge VGA_CLK) // VSYNC
if(HS_count==CYCLES_LINE-1) 
begin 
	if(VS_count < CYCLES_ROW)
		VS_count <= VS_count + 1;
	else
		begin
			VS_count <= 0;
			frameCounter = frameCounter + 1;
			if(frameCounter == 15)
			begin
				frameCounter = 0;
				tick = ~tick;
			end
		end
		
	if(VS_count > V_ACTIVE_VIDEO_D+V_FRONT_PORCH_A && VS_count < CYCLES_ROW - V_BACK_PORCH_C)
		VGA_VS <= 0;
	else
		VGA_VS <= 1;
end


always @(negedge tick)
begin
	fb[rndHi%48][rndLo%64] = KEY0;//fb[rndHi%48][rndLo%64];
end

//******************************************************************************

always @(posedge VGA_CLK)
begin
if(HS_count<ROWS && VS_count <COLS) 
begin
	//VGA_G <= HS_count / (640/16);
	//VGA_B <= VS_count / (480/16) + frameCounter/2;
	
	if(fb[HS_count][VS_count]==1)
		VGA_B <= 4'b1111;
	else
		VGA_B <= 4'b0000;
end 
else begin
	//VGA_R <= 4'b0000;
	//VGA_G <= 4'b0000;
	VGA_B <= 4'b0000;
end
end

endmodule


//******************************************************************************
module LFSR16(
  input clk,
  output reg [15:0] LFSR
);

always @(posedge clk)
begin
  LFSR[0] <= ~(LFSR[1] ^ LFSR[2] ^ LFSR[4] ^ LFSR[15]);
  LFSR[15:1] <= LFSR[14:0];
end
endmodule

